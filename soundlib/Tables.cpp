/*
 * Tables.cpp
 * ----------
 * Purpose: Effect, interpolation, data and other pre-calculated tables.
 * Notes  : (currently none)
 * Authors: Olivier Lapicque
 *          OpenMPT Devs
 * The OpenMPT source code is released under the BSD license. Read LICENSE for more details.
 */


#include "stdafx.h"
#include "Tables.h"
#include "Sndfile.h"

#include "Resampler.h"
#include "WindowedFIR.h"
#include <cmath>


OPENMPT_NAMESPACE_BEGIN


/////////////////////////////////////////////////////////////////////////////
// Note Name Tables

const mpt::uchar NoteNamesSharp[12][4] =
{
	UL_("C-"), UL_("C#"), UL_("D-"), UL_("D#"), UL_("E-"), UL_("F-"),
	UL_("F#"), UL_("G-"), UL_("G#"), UL_("A-"), UL_("A#"), UL_("B-")
};

const mpt::uchar NoteNamesFlat[12][4] =
{
	UL_("C-"), UL_("Db"), UL_("D-"), UL_("Eb"), UL_("E-"), UL_("F-"),
	UL_("Gb"), UL_("G-"), UL_("Ab"), UL_("A-"), UL_("Bb"), UL_("B-")
};


///////////////////////////////////////////////////////////
// File Formats Information (name, extension, etc)

struct ModFormatInfo
{
	const mpt::uchar *name;  // "ProTracker"
	const char *extension;   // "mod"
};

// Note: Formats with identical extensions must be grouped together.
static constexpr ModFormatInfo modFormatInfo[] =
{
	{ UL_("OpenMPT"),                            "mptm" },
	{ UL_("ProTracker"),                         "mod" },
	{ UL_("ChipTracker"),                        "mod" },
	{ UL_("Scream Tracker 3"),                   "s3m" },
	{ UL_("FastTracker 2"),                      "xm" },
	{ UL_("Impulse Tracker"),                    "it" },

	{ UL_("Composer 667"),                       "667" },
	{ UL_("Composer 669 / UNIS 669"),            "669" },
	{ UL_("ASYLUM Music Format"),                "amf" },
	{ UL_("DSMI Advanced Music Format"),         "amf" },
	{ UL_("Extreme's Tracker"),                  "ams" },
	{ UL_("Velvet Studio"),                      "ams" },
	{ UL_("CDFM / Composer 670"),                "c67" },
	{ UL_("Chuck Biscuits / Black Artist"),      "cba" },
	{ UL_("DigiBooster Pro"),                    "dbm" },
	{ UL_("DigiBooster"),                        "digi" },
	{ UL_("X-Tracker"),                          "dmf" },
	{ UL_("DSMI Advanced Music Format (Compact)"), "dmf" },
	{ UL_("DSIK Format"),                        "dsm" },
	{ UL_("Dynamic Studio"),                     "dsm" },
	{ UL_("Digital Symphony"),                   "dsym" },
	{ UL_("Digital Tracker"),                    "dtm" },
	{ UL_("Farandole Composer"),                 "far" },
	{ UL_("FM Tracker"),                         "fmt" },
	{ UL_("Face The Music"),                     "ftm" },
	{ UL_("Imago Orpheus"),                      "imf" },
	{ UL_("Images Music System"),                "ims" },
	{ UL_("Ice Tracker"),                        "ice" },
#ifdef MPT_EXTERNAL_SAMPLES
	{ UL_("Impulse Tracker Project"),            "itp" },
#endif
	{ UL_("Galaxy Sound System"),                "j2b" },
	{ UL_("Soundtracker"),                       "m15" },
	{ UL_("Digitrakker"),                        "mdl" },
	{ UL_("OctaMED"),                            "med" },
	{ UL_("MultiMedia Sound"),                   "mms" },
	{ UL_("MadTracker 2"),                       "mt2" },
	{ UL_("MultiTracker"),                       "mtm" },
	{ UL_("Karl Morton Music Format"),           "mus" },
	{ UL_("NoiseTracker"),                       "nst" },
	{ UL_("Oktalyzer"),                          "okt" },
	{ UL_("Disorder Tracker 2"),                 "plm" },
	{ UL_("Epic Megagames MASI"),                "psm" },
	{ UL_("ProTracker"),                         "pt36" },
	{ UL_("PolyTracker"),                        "ptm" },
	{ UL_("Puma Tracker"),                       "puma" },
	{ UL_("Real Tracker 2"),                     "rtm" },
	{ UL_("SoundFX"),                            "sfx" },
	{ UL_("SoundFX"),                            "sfx2" },
	{ UL_("SoundTracker 2.6"),                   "st26" },
	{ UL_("Soundtracker"),                       "stk" },
	{ UL_("Scream Tracker 2"),                   "stm" },
	{ UL_("Scream Tracker Music Interface Kit"), "stx" },
	{ UL_("Soundtracker Pro II"),                "stp" },
	{ UL_("Symphonie"),                          "symmod"},
	{ UL_("Game Music Creator"),                 "gmc" },
	{ UL_("Graoumf Tracker"),                    "gtk" },
	{ UL_("Graoumf Tracker 1 / 2"),              "gt2" },
	{ UL_("UltraTracker"),                       "ult" },
	{ UL_("Mod's Grave"),                        "wow" },
	{ UL_("Astroidea XMF"),                      "xmf" },
	// converted formats (no MODTYPE)
	{ UL_("General Digital Music"),              "gdm" },
	{ UL_("Un4seen MO3"),                        "mo3" },
	{ UL_("OggMod FastTracker 2"),               "oxm" },
#ifndef NO_ARCHIVE_SUPPORT
	// Compressed modules
	{ UL_("Compressed ProTracker"),              "mdz" },
	{ UL_("Compressed Module"),                  "mdr" },
	{ UL_("Compressed Scream Tracker 3"),        "s3z" },
	{ UL_("Compressed FastTracker 2"),           "xmz" },
	{ UL_("Compressed Impulse Tracker"),         "itz" },
	{ UL_("Compressed OpenMPT"),                 "mptmz" },
#endif
};


struct ModContainerInfo
{
	ModContainerType format;  // ModContainerType::XXX
	const mpt::uchar *name;   // "Unreal Music"
	const char *extension;    // "umx"
};

static constexpr ModContainerInfo modContainerInfo[] =
{
	// Container formats
	{ ModContainerType::UMX,     UL_("Unreal Music"),             "umx"   },
	{ ModContainerType::XPK,     UL_("XPK packed"),               "xpk"   },
	{ ModContainerType::PP20,    UL_("PowerPack PP20"),           "ppm"   },
	{ ModContainerType::MMCMP,   UL_("Music Module Compressor"),  "mmcmp" },
#ifdef MODPLUG_TRACKER
	{ ModContainerType::WAV,     UL_("Wave"),                     "wav"   },
	{ ModContainerType::UAX,     UL_("Unreal Sounds"),            "uax"   },
	{ ModContainerType::Generic, UL_("Generic Archive"),          ""      },
#endif
};


#ifdef MODPLUG_TRACKER
static constexpr ModFormatInfo otherFormatInfo[] =
{
	{ UL_("MIDI"), "mid" },
	{ UL_("MIDI"), "rmi" },
	{ UL_("MIDI"), "smf" }
};
#endif


std::vector<const char *> CSoundFile::GetSupportedExtensions(bool otherFormats)
{
	std::vector<const char *> exts;
	for(const auto &formatInfo : modFormatInfo)
	{
		// Avoid dupes in list
		const std::string_view ext = formatInfo.extension;
		if(ext.empty())
			continue;
		if(exts.empty() || ext != exts.back())
			exts.push_back(formatInfo.extension);
	}
	for(const auto &containerInfo : modContainerInfo)
	{
		// Avoid dupes in list
		const std::string_view ext = containerInfo.extension;
		if(ext.empty())
			continue;
		if(exts.empty() || ext != exts.back())
			exts.push_back(ext.data());
	}
#ifdef MODPLUG_TRACKER
	if(otherFormats)
	{
		for(const auto &formatInfo : otherFormatInfo)
		{
			exts.push_back(formatInfo.extension);
		}
	}
#else
	MPT_UNREFERENCED_PARAMETER(otherFormats);
#endif
	return exts;
}


static bool IsEqualExtension(std::string_view a, std::string_view b)
{
	if(a.length() != b.length())
	{
		return false;
	}
	return mpt::CompareNoCaseAscii(a, b) == 0;
}


bool CSoundFile::IsExtensionSupported(std::string_view ext)
{
	if(ext.length() == 0)
	{
		return false;
	}
	for(const auto &formatInfo : modFormatInfo)
	{
		if(IsEqualExtension(ext, formatInfo.extension))
		{
			return true;
		}
	}
	for(const auto &containerInfo : modContainerInfo)
	{
		if(IsEqualExtension(ext, containerInfo.extension))
		{
			return true;
		}
	}
	return false;
}


mpt::ustring CSoundFile::ModContainerTypeToString(ModContainerType containertype)
{
	for(const auto &containerInfo : modContainerInfo)
	{
		if(containerInfo.format == containertype)
		{
			return mpt::ToUnicode(mpt::Charset::UTF8, containerInfo.extension);
		}
	}
	return mpt::ustring();
}


mpt::ustring CSoundFile::ModContainerTypeToTracker(ModContainerType containertype)
{
	std::set<mpt::ustring> retvals;
	mpt::ustring retval;
	for(const auto &containerInfo : modContainerInfo)
	{
		if(containerInfo.format == containertype)
		{
			mpt::ustring name = containerInfo.name;
			if(retvals.insert(name).second)
			{
				if(!retval.empty())
				{
					retval += U_(" / ");
				}
				retval += name;
			}
		}
	}
	return retval;
}



///////////////////////////////////////////////////////////////////////

const uint8 ImpulseTrackerPortaVolCmd[16] =
{
	0x00, 0x01, 0x04, 0x08, 0x10, 0x20, 0x40, 0x60,
	0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// Period table for ProTracker octaves (1-7 in FastTracker 2, also used for file I/O):
const uint16 ProTrackerPeriodTable[7*12] =
{
	2*1712,2*1616,2*1524,2*1440,2*1356,2*1280,2*1208,2*1140,2*1076,2*1016,2*960,2*906,
	1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,907,
	856,808,762,720,678,640,604,570,538,508,480,453,
	428,404,381,360,339,320,302,285,269,254,240,226,
	214,202,190,180,170,160,151,143,135,127,120,113,
	107,101,95,90,85,80,75,71,67,63,60,56,
	53,50,47,45,42,40,37,35,33,31,30,28
};


const uint16 ProTrackerTunedPeriods[16*12] =
{
	1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,907,
	1700,1604,1514,1430,1348,1274,1202,1134,1070,1010,954,900,
	1688,1592,1504,1418,1340,1264,1194,1126,1064,1004,948,894,
	1676,1582,1492,1408,1330,1256,1184,1118,1056,996,940,888,
	1664,1570,1482,1398,1320,1246,1176,1110,1048,990,934,882,
	1652,1558,1472,1388,1310,1238,1168,1102,1040,982,926,874,
	1640,1548,1460,1378,1302,1228,1160,1094,1032,974,920,868,
	1628,1536,1450,1368,1292,1220,1150,1086,1026,968,914,862,
	1814,1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,
	1800,1700,1604,1514,1430,1350,1272,1202,1134,1070,1010,954,
	1788,1688,1592,1504,1418,1340,1264,1194,1126,1064,1004,948,
	1774,1676,1582,1492,1408,1330,1256,1184,1118,1056,996,940,
	1762,1664,1570,1482,1398,1320,1246,1176,1110,1048,988,934,
	1750,1652,1558,1472,1388,1310,1238,1168,1102,1040,982,926,
	1736,1640,1548,1460,1378,1302,1228,1160,1094,1032,974,920,
	1724,1628,1536,1450,1368,1292,1220,1150,1086,1026,968,914
};

// Table for Invert Loop and Funk Repeat effects (EFx, .MOD only)
const uint8 ModEFxTable[16] =
{
	 0,  5,  6,  7,  8, 10, 11, 13,
	16, 19, 22, 26, 32, 43, 64, 128
};

// S3M C-4 periods
const uint16 FreqS3MTable[12] =
{
	1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,907
};

// S3M FineTune frequencies
const uint16 S3MFineTuneTable[16] =
{
	7895,7941,7985,8046,8107,8169,8232,8280,
	8363,8413,8463,8529,8581,8651,8723,8757,	// 8363*2^((i-8)/(12*8))
};


// Sinus table
const int8 ModSinusTable[64] =
{
	0,12,25,37,49,60,71,81,90,98,106,112,117,122,125,126,
	127,126,125,122,117,112,106,98,90,81,71,60,49,37,25,12,
	0,-12,-25,-37,-49,-60,-71,-81,-90,-98,-106,-112,-117,-122,-125,-126,
	-127,-126,-125,-122,-117,-112,-106,-98,-90,-81,-71,-60,-49,-37,-25,-12
};

// Random wave table
const int8 ModRandomTable[64] =
{
	98,-127,-43,88,102,41,-65,-94,125,20,-71,-86,-70,-32,-16,-96,
	17,72,107,-5,116,-69,-62,-40,10,-61,65,109,-18,-38,-13,-76,
	-23,88,21,-94,8,106,21,-112,6,109,20,-88,-30,9,-127,118,
	42,-34,89,-4,-51,-72,21,-29,112,123,84,-101,-92,98,-54,-95
};

// Impulse Tracker sinus table (ITTECH.TXT)
const int8 ITSinusTable[256] =
{
	  0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23,
	 24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44,
	 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59,
	 59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64,
	 64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60,
	 59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46,
	 45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26,
 	 24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2,
 	  0, -2, -3, -5, -6, -8, -9,-11,-12,-14,-16,-17,-19,-20,-22,-23,
	-24,-26,-27,-29,-30,-32,-33,-34,-36,-37,-38,-39,-41,-42,-43,-44,
	-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-56,-57,-58,-59,
	-59,-60,-60,-61,-61,-62,-62,-62,-63,-63,-63,-64,-64,-64,-64,-64,
	-64,-64,-64,-64,-64,-64,-63,-63,-63,-62,-62,-62,-61,-61,-60,-60,
	-59,-59,-58,-57,-56,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,
	-45,-44,-43,-42,-41,-39,-38,-37,-36,-34,-33,-32,-30,-29,-27,-26,
	-24,-23,-22,-20,-19,-17,-16,-14,-12,-11, -9, -8, -6, -5, -3, -2,
};


// volume fade tables for Retrig Note:
const int8 retrigTable1[16] =
{ 0, 0, 0, 0, 0, 0, 10, 8, 0, 0, 0, 0, 0, 0, 24, 32 };

const int8 retrigTable2[16] =
{ 0, -1, -2, -4, -8, -16, 0, 0, 0, 1, 2, 4, 8, 16, 0, 0 };




const uint16 XMPeriodTable[104] =
{
	907,900,894,887,881,875,868,862,856,850,844,838,832,826,820,814,
	808,802,796,791,785,779,774,768,762,757,752,746,741,736,730,725,
	720,715,709,704,699,694,689,684,678,675,670,665,660,655,651,646,
	640,636,632,628,623,619,614,610,604,601,597,592,588,584,580,575,
	570,567,563,559,555,551,547,543,538,535,532,528,524,520,516,513,
	508,505,502,498,494,491,487,484,480,477,474,470,467,463,460,457,
	453,450,447,443,440,437,434,431
};


// floor(8363 * 64 * 2**(-n/768))
// 768 = 64 period steps for 12 notes
// Table is for highest possible octave
const uint32 XMLinearTable[768] =
{
	535232,534749,534266,533784,533303,532822,532341,531861,
	531381,530902,530423,529944,529466,528988,528511,528034,
	527558,527082,526607,526131,525657,525183,524709,524236,
	523763,523290,522818,522346,521875,521404,520934,520464,
	519994,519525,519057,518588,518121,517653,517186,516720,
	516253,515788,515322,514858,514393,513929,513465,513002,
	512539,512077,511615,511154,510692,510232,509771,509312,
	508852,508393,507934,507476,507018,506561,506104,505647,
	505191,504735,504280,503825,503371,502917,502463,502010,
	501557,501104,500652,500201,499749,499298,498848,498398,
	497948,497499,497050,496602,496154,495706,495259,494812,
	494366,493920,493474,493029,492585,492140,491696,491253,
	490809,490367,489924,489482,489041,488600,488159,487718,
	487278,486839,486400,485961,485522,485084,484647,484210,
	483773,483336,482900,482465,482029,481595,481160,480726,
	480292,479859,479426,478994,478562,478130,477699,477268,
	476837,476407,475977,475548,475119,474690,474262,473834,
	473407,472979,472553,472126,471701,471275,470850,470425,
	470001,469577,469153,468730,468307,467884,467462,467041,
	466619,466198,465778,465358,464938,464518,464099,463681,
	463262,462844,462427,462010,461593,461177,460760,460345,
	459930,459515,459100,458686,458272,457859,457446,457033,
	456621,456209,455797,455386,454975,454565,454155,453745,
	453336,452927,452518,452110,451702,451294,450887,450481,
	450074,449668,449262,448857,448452,448048,447644,447240,
	446836,446433,446030,445628,445226,444824,444423,444022,
	443622,443221,442821,442422,442023,441624,441226,440828,
	440430,440033,439636,439239,438843,438447,438051,437656,
	437261,436867,436473,436079,435686,435293,434900,434508,
	434116,433724,433333,432942,432551,432161,431771,431382,
	430992,430604,430215,429827,429439,429052,428665,428278,
	427892,427506,427120,426735,426350,425965,425581,425197,
	424813,424430,424047,423665,423283,422901,422519,422138,
	421757,421377,420997,420617,420237,419858,419479,419101,
	418723,418345,417968,417591,417214,416838,416462,416086,
	415711,415336,414961,414586,414212,413839,413465,413092,
	412720,412347,411975,411604,411232,410862,410491,410121,
	409751,409381,409012,408643,408274,407906,407538,407170,
	406803,406436,406069,405703,405337,404971,404606,404241,
	403876,403512,403148,402784,402421,402058,401695,401333,
	400970,400609,400247,399886,399525,399165,398805,398445,
	398086,397727,397368,397009,396651,396293,395936,395579,
	395222,394865,394509,394153,393798,393442,393087,392733,
	392378,392024,391671,391317,390964,390612,390259,389907,
	389556,389204,388853,388502,388152,387802,387452,387102,
	386753,386404,386056,385707,385359,385012,384664,384317,
	383971,383624,383278,382932,382587,382242,381897,381552,
	381208,380864,380521,380177,379834,379492,379149,378807,
	378466,378124,377783,377442,377102,376762,376422,376082,
	375743,375404,375065,374727,374389,374051,373714,373377,
	373040,372703,372367,372031,371695,371360,371025,370690,
	370356,370022,369688,369355,369021,368688,368356,368023,
	367691,367360,367028,366697,366366,366036,365706,365376,
	365046,364717,364388,364059,363731,363403,363075,362747,
	362420,362093,361766,361440,361114,360788,360463,360137,
	359813,359488,359164,358840,358516,358193,357869,357547,
	357224,356902,356580,356258,355937,355616,355295,354974,
	354654,354334,354014,353695,353376,353057,352739,352420,
	352103,351785,351468,351150,350834,350517,350201,349885,
	349569,349254,348939,348624,348310,347995,347682,347368,
	347055,346741,346429,346116,345804,345492,345180,344869,
	344558,344247,343936,343626,343316,343006,342697,342388,
	342079,341770,341462,341154,340846,340539,340231,339924,
	339618,339311,339005,338700,338394,338089,337784,337479,
	337175,336870,336566,336263,335959,335656,335354,335051,
	334749,334447,334145,333844,333542,333242,332941,332641,
	332341,332041,331741,331442,331143,330844,330546,330247,
	329950,329652,329355,329057,328761,328464,328168,327872,
	327576,327280,326985,326690,326395,326101,325807,325513,
	325219,324926,324633,324340,324047,323755,323463,323171,
	322879,322588,322297,322006,321716,321426,321136,320846,
	320557,320267,319978,319690,319401,319113,318825,318538,
	318250,317963,317676,317390,317103,316817,316532,316246,
	315961,315676,315391,315106,314822,314538,314254,313971,
	313688,313405,313122,312839,312557,312275,311994,311712,
	311431,311150,310869,310589,310309,310029,309749,309470,
	309190,308911,308633,308354,308076,307798,307521,307243,
	306966,306689,306412,306136,305860,305584,305308,305033,
	304758,304483,304208,303934,303659,303385,303112,302838,
	302565,302292,302019,301747,301475,301203,300931,300660,
	300388,300117,299847,299576,299306,299036,298766,298497,
	298227,297958,297689,297421,297153,296884,296617,296349,
	296082,295815,295548,295281,295015,294749,294483,294217,
	293952,293686,293421,293157,292892,292628,292364,292100,
	291837,291574,291311,291048,290785,290523,290261,289999,
	289737,289476,289215,288954,288693,288433,288173,287913,
	287653,287393,287134,286875,286616,286358,286099,285841,
	285583,285326,285068,284811,284554,284298,284041,283785,
	283529,283273,283017,282762,282507,282252,281998,281743,
	281489,281235,280981,280728,280475,280222,279969,279716,
	279464,279212,278960,278708,278457,278206,277955,277704,
	277453,277203,276953,276703,276453,276204,275955,275706,
	275457,275209,274960,274712,274465,274217,273970,273722,
	273476,273229,272982,272736,272490,272244,271999,271753,
	271508,271263,271018,270774,270530,270286,270042,269798,
	269555,269312,269069,268826,268583,268341,268099,267857
};


// round(65536 * 2**(n/768))
// 768 = 64 extra-fine finetune steps for 12 notes
// Table content is in 16.16 format
const uint32 FineLinearSlideUpTable[16] =
{
	65536, 65595, 65654, 65714,	65773, 65832, 65892, 65951,
	66011, 66071, 66130, 66190, 66250, 66309, 66369, 66429
};


// round(65536 * 2**(-n/768))
// 768 = 64 extra-fine finetune steps for 12 notes
// Table content is in 16.16 format
// Note that there are a few errors in this table (typos?), but well, this table comes straight from Impulse Tracker's source...
// Entry 0 (65535) should be 65536 (this value is unused and most likely stored this way so that it fits in a 16-bit integer)
// Entry 11 (64888) should be 64889 - rounding error?
// Entry 15 (64645) should be 64655 - typo?
const uint32 FineLinearSlideDownTable[16] =
{
	65535, 65477, 65418, 65359, 65300, 65241, 65182, 65123,
	65065, 65006, 64947, 64888, 64830, 64772, 64713, 64645
};


// round(65536 * 2**(n/192))
// 192 = 16 finetune steps for 12 notes
// Table content is in 16.16 format
const uint32 LinearSlideUpTable[256] =
{
	65536, 65773, 66011, 66250, 66489, 66730, 66971, 67213,
	67456, 67700, 67945, 68191, 68438, 68685, 68933, 69183,
	69433, 69684, 69936, 70189, 70443, 70698, 70953, 71210,
	71468, 71726, 71985, 72246, 72507, 72769, 73032, 73297,
	73562, 73828, 74095, 74363, 74632, 74902, 75172, 75444,
	75717, 75991, 76266, 76542, 76819, 77096, 77375, 77655,
	77936, 78218, 78501, 78785, 79069, 79355, 79642, 79930,
	80220, 80510, 80801, 81093, 81386, 81681, 81976, 82273,
	82570, 82869, 83169, 83469, 83771, 84074, 84378, 84683,
	84990, 85297, 85606, 85915, 86226, 86538, 86851, 87165,
	87480, 87796, 88114, 88433, 88752, 89073, 89396, 89719,
	90043, 90369, 90696, 91024, 91353, 91684, 92015, 92348,
	92682, 93017, 93354, 93691, 94030, 94370, 94711, 95054,
	95398, 95743, 96089, 96436, 96785, 97135, 97487, 97839,
	98193, 98548, 98905, 99262, 99621, 99982, 100343, 100706,
	101070, 101436, 101803, 102171, 102540, 102911, 103283, 103657,
	104032, 104408, 104786, 105165, 105545, 105927, 106310, 106694,
	107080, 107468, 107856, 108246, 108638, 109031, 109425, 109821,
	110218, 110617, 111017, 111418, 111821, 112226, 112631, 113039,
	113448, 113858, 114270, 114683, 115098, 115514, 115932, 116351,
	116772, 117194, 117618, 118043, 118470, 118899, 119329, 119760,
	120194, 120628, 121065, 121502, 121942, 122383, 122825, 123270,
	123715, 124163, 124612, 125063, 125515, 125969, 126425, 126882,
	127341, 127801, 128263, 128727, 129193, 129660, 130129, 130600,
	131072, 131546, 132022, 132499, 132978, 133459, 133942, 134427,
	134913, 135401, 135890, 136382, 136875, 137370, 137867, 138366,
	138866, 139368, 139872, 140378, 140886, 141395, 141907, 142420,
	142935, 143452, 143971, 144491, 145014, 145539, 146065, 146593,
	147123, 147655, 148189, 148725, 149263, 149803, 150345, 150889,
	151434, 151982, 152532, 153083, 153637, 154193, 154750, 155310,
	155872, 156435, 157001, 157569, 158139, 158711, 159285, 159861,
	160439, 161019, 161602, 162186, 162773, 163361, 163952, 164545
};


// round(65536 * 2**(-n/192))
// 192 = 16 finetune steps for 12 notes
// Table content is in 16.16 format
const uint32 LinearSlideDownTable[256] =
{
	65536, 65300, 65065, 64830, 64596, 64364, 64132, 63901,
	63670, 63441, 63212, 62984, 62757, 62531, 62306, 62081,
	61858, 61635, 61413, 61191, 60971, 60751, 60532, 60314,
	60097, 59880, 59664, 59449, 59235, 59022, 58809, 58597,
	58386, 58176, 57966, 57757, 57549, 57341, 57135, 56929,
	56724, 56519, 56316, 56113, 55911, 55709, 55508, 55308,
	55109, 54910, 54713, 54515, 54319, 54123, 53928, 53734,
	53540, 53347, 53155, 52963, 52773, 52582, 52393, 52204,
	52016, 51829, 51642, 51456, 51270, 51085, 50901, 50718,
	50535, 50353, 50172, 49991, 49811, 49631, 49452, 49274,
	49097, 48920, 48743, 48568, 48393, 48218, 48044, 47871,
	47699, 47527, 47356, 47185, 47015, 46846, 46677, 46509,
	46341, 46174, 46008, 45842, 45677, 45512, 45348, 45185,
	45022, 44859, 44698, 44537, 44376, 44216, 44057, 43898,
	43740, 43582, 43425, 43269, 43113, 42958, 42803, 42649,
	42495, 42342, 42189, 42037, 41886, 41735, 41584, 41434,
	41285, 41136, 40988, 40840, 40693, 40547, 40400, 40255,
	40110, 39965, 39821, 39678, 39535, 39392, 39250, 39109,
	38968, 38828, 38688, 38548, 38409, 38271, 38133, 37996,
	37859, 37722, 37586, 37451, 37316, 37181, 37047, 36914,
	36781, 36648, 36516, 36385, 36254, 36123, 35993, 35863,
	35734, 35605, 35477, 35349, 35221, 35095, 34968, 34842,
	34716, 34591, 34467, 34343, 34219, 34095, 33973, 33850,
	33728, 33607, 33486, 33365, 33245, 33125, 33005, 32887,
	32768, 32650, 32532, 32415, 32298, 32182, 32066, 31950,
	31835, 31720, 31606, 31492, 31379, 31266, 31153, 31041,
	30929, 30817, 30706, 30596, 30485, 30376, 30266, 30157,
	30048, 29940, 29832, 29725, 29618, 29511, 29405, 29299,
	29193, 29088, 28983, 28879, 28774, 28671, 28567, 28464,
	28362, 28260, 28158, 28056, 27955, 27855, 27754, 27654,
	27554, 27455, 27356, 27258, 27159, 27062, 26964, 26867,
	26770, 26674, 26577, 26482, 26386, 26291, 26196, 26102
};


// FT2's square root panning law LUT.
// Formula to generate this table: round(65536 * sqrt(n / 256))
const uint16 XMPanningTable[256] =
{
	0,     4096,  5793,  7094,  8192,  9159,  10033, 10837, 11585, 12288, 12953, 13585, 14189, 14768, 15326, 15864,
	16384, 16888, 17378, 17854, 18318, 18770, 19212, 19644, 20066, 20480, 20886, 21283, 21674, 22058, 22435, 22806,
	23170, 23530, 23884, 24232, 24576, 24915, 25249, 25580, 25905, 26227, 26545, 26859, 27170, 27477, 27780, 28081,
	28378, 28672, 28963, 29251, 29537, 29819, 30099, 30377, 30652, 30924, 31194, 31462, 31727, 31991, 32252, 32511,
	32768, 33023, 33276, 33527, 33776, 34024, 34270, 34514, 34756, 34996, 35235, 35472, 35708, 35942, 36175, 36406,
	36636, 36864, 37091, 37316, 37540, 37763, 37985, 38205, 38424, 38642, 38858, 39073, 39287, 39500, 39712, 39923,
	40132, 40341, 40548, 40755, 40960, 41164, 41368, 41570, 41771, 41972, 42171, 42369, 42567, 42763, 42959, 43154,
	43348, 43541, 43733, 43925, 44115, 44305, 44494, 44682, 44869, 45056, 45242, 45427, 45611, 45795, 45977, 46160,
	46341, 46522, 46702, 46881, 47059, 47237, 47415, 47591, 47767, 47942, 48117, 48291, 48465, 48637, 48809, 48981,
	49152, 49322, 49492, 49661, 49830, 49998, 50166, 50332, 50499, 50665, 50830, 50995, 51159, 51323, 51486, 51649,
	51811, 51972, 52134, 52294, 52454, 52614, 52773, 52932, 53090, 53248, 53405, 53562, 53719, 53874, 54030, 54185,
	54340, 54494, 54647, 54801, 54954, 55106, 55258, 55410, 55561, 55712, 55862, 56012, 56162, 56311, 56459, 56608,
	56756, 56903, 57051, 57198, 57344, 57490, 57636, 57781, 57926, 58071, 58215, 58359, 58503, 58646, 58789, 58931,
	59073, 59215, 59357, 59498, 59639, 59779, 59919, 60059, 60199, 60338, 60477, 60615, 60753, 60891, 61029, 61166,
	61303, 61440, 61576, 61712, 61848, 61984, 62119, 62254, 62388, 62523, 62657, 62790, 62924, 63057, 63190, 63323,
	63455, 63587, 63719, 63850, 63982, 64113, 64243, 64374, 64504, 64634, 64763, 64893, 65022, 65151, 65279, 65408,
};


// IT Vibrato -> OpenMPT/XM VibratoType
const uint8 AutoVibratoIT2XM[8] = { VIB_SINE, VIB_RAMP_DOWN, VIB_SQUARE, VIB_RANDOM, VIB_RAMP_UP, 0, 0, 0 };
// OpenMPT/XM VibratoType -> IT Vibrato
const uint8 AutoVibratoXM2IT[8] = { 0, 2, 4, 1, 3, 0, 0, 0 };

// Reversed sinc coefficients for 4x256 taps polyphase FIR resampling filter (SchismTracker's lutgen.c should generate a very similar table, but it's more precise)
const int16 CResampler::FastSincTable[512*4] =
{ // Cubic Spline
2737,10867,2737,44,
2722,10867,2751,44,
2707,10867,2766,45,
2693,10866,2781,45,
2678,10866,2796,46,
2664,10866,2811,46,
2649,10865,2826,47,
2635,10864,2841,47,
2620,10863,2856,48,
2606,10862,2871,48,
2592,10861,2887,49,
2578,10860,2902,49,
2563,10859,2917,50,
2549,10857,2933,50,
2535,10856,2948,51,
2521,10854,2963,51,
2507,10852,2979,52,
2493,10850,2995,52,
2480,10848,3010,53,
2466,10846,3026,54,
2452,10844,3042,54,
2438,10842,3057,55,
2425,10839,3073,55,
2411,10837,3089,56,
2398,10834,3105,56,
2384,10831,3121,57,
2371,10828,3137,58,
2357,10825,3153,58,
2344,10822,3169,59,
2331,10819,3185,59,
2317,10816,3201,60,
2304,10812,3218,61,
2291,10809,3234,61,
2278,10805,3250,62,
2265,10801,3267,63,
2252,10797,3283,63,
2239,10793,3300,64,
2226,10789,3316,65,
2213,10785,3333,65,
2200,10780,3350,66,
2188,10776,3366,67,
2175,10771,3383,67,
2162,10767,3400,68,
2150,10762,3417,69,
2137,10757,3433,70,
2125,10752,3450,70,
2112,10747,3467,71,
2100,10741,3484,72,
2088,10736,3501,72,
2075,10731,3519,73,
2063,10725,3536,74,
2051,10719,3553,75,
2039,10713,3570,75,
2027,10708,3588,76,
2015,10702,3605,77,
2003,10695,3622,78,
1991,10689,3640,79,
1979,10683,3657,79,
1967,10676,3675,80,
1955,10670,3692,81,
1944,10663,3710,82,
1932,10656,3728,83,
1920,10649,3745,84,
1909,10642,3763,84,
1897,10635,3781,85,
1886,10628,3799,86,
1874,10621,3817,87,
1863,10613,3834,88,
1852,10606,3852,89,
1840,10598,3870,90,
1829,10590,3889,91,
1818,10583,3907,91,
1807,10575,3925,92,
1796,10567,3943,93,
1785,10558,3961,94,
1774,10550,3979,95,
1763,10542,3998,96,
1752,10533,4016,97,
1741,10525,4035,98,
1730,10516,4053,99,
1720,10507,4071,100,
1709,10498,4090,101,
1698,10489,4109,102,
1688,10480,4127,103,
1677,10471,4146,104,
1667,10462,4165,105,
1656,10452,4183,106,
1646,10443,4202,107,
1636,10433,4221,108,
1625,10423,4240,109,
1615,10414,4259,110,
1605,10404,4277,112,
1595,10394,4296,113,
1585,10384,4315,114,
1574,10373,4334,115,
1564,10363,4354,116,
1554,10353,4373,117,
1545,10342,4392,118,
1535,10332,4411,119,
1525,10321,4430,121,
1515,10310,4450,122,
1505,10299,4469,123,
1496,10288,4488,124,
1486,10277,4508,125,
1476,10266,4527,127,
1467,10255,4546,128,
1457,10243,4566,129,
1448,10232,4585,130,
1439,10220,4605,132,
1429,10209,4625,133,
1420,10197,4644,134,
1411,10185,4664,135,
1401,10173,4684,137,
1392,10161,4703,138,
1383,10149,4723,139,
1374,10137,4743,141,
1365,10124,4763,142,
1356,10112,4783,143,
1347,10099,4802,145,
1338,10087,4822,146,
1329,10074,4842,148,
1320,10061,4862,149,
1312,10049,4882,150,
1303,10036,4902,152,
1294,10023,4922,153,
1286,10009,4943,155,
1277,9996,4963,156,
1268,9983,4983,158,
1260,9970,5003,159,
1251,9956,5023,161,
1243,9943,5044,162,
1235,9929,5064,164,
1226,9915,5084,165,
1218,9901,5104,167,
1210,9887,5125,168,
1202,9874,5145,170,
1193,9859,5166,172,
1185,9845,5186,173,
1177,9831,5207,175,
1169,9817,5227,177,
1161,9802,5248,178,
1153,9788,5268,180,
1145,9773,5289,182,
1138,9759,5309,183,
1130,9744,5330,185,
1122,9729,5351,187,
1114,9714,5371,188,
1107,9699,5392,190,
1099,9684,5413,192,
1091,9669,5433,194,
1084,9654,5454,195,
1076,9639,5475,197,
1069,9623,5496,199,
1061,9608,5517,201,
1054,9592,5537,203,
1046,9577,5558,205,
1039,9561,5579,206,
1032,9545,5600,208,
1025,9530,5621,210,
1017,9514,5642,212,
1010,9498,5663,214,
1003,9482,5684,216,
996,9466,5705,218,
989,9450,5726,220,
982,9433,5747,222,
975,9417,5768,224,
968,9401,5789,226,
961,9384,5810,228,
954,9368,5831,230,
948,9351,5852,232,
941,9334,5873,234,
934,9318,5895,237,
927,9301,5916,239,
921,9284,5937,241,
914,9267,5958,243,
908,9250,5979,245,
901,9233,6001,247,
894,9216,6022,250,
888,9199,6043,252,
882,9181,6064,254,
875,9164,6085,256,
869,9147,6107,259,
863,9129,6128,261,
856,9112,6149,263,
850,9094,6171,266,
844,9077,6192,268,
838,9059,6213,270,
832,9041,6234,273,
825,9023,6256,275,
819,9005,6277,277,
813,8987,6298,280,
807,8969,6320,282,
801,8951,6341,285,
795,8933,6363,287,
790,8915,6384,290,
784,8897,6405,292,
778,8879,6427,295,
772,8860,6448,298,
766,8842,6469,300,
761,8823,6491,303,
755,8805,6512,305,
749,8786,6533,308,
744,8768,6555,311,
738,8749,6576,313,
733,8730,6598,316,
727,8712,6619,319,
722,8693,6640,322,
716,8674,6662,324,
711,8655,6683,327,
705,8636,6704,330,
700,8617,6726,333,
695,8598,6747,336,
690,8579,6769,339,
684,8560,6790,342,
679,8541,6811,345,
674,8521,6833,347,
669,8502,6854,350,
664,8483,6875,353,
659,8463,6897,356,
654,8444,6918,359,
649,8424,6939,363,
644,8405,6961,366,
639,8385,6982,369,
634,8366,7003,372,
629,8346,7025,375,
624,8326,7046,378,
619,8307,7067,381,
614,8287,7088,385,
610,8267,7110,388,
605,8247,7131,391,
600,8227,7152,394,
596,8207,7173,398,
591,8187,7194,401,
586,8167,7216,404,
582,8147,7237,408,
577,8127,7258,411,
573,8107,7279,414,
568,8087,7300,418,
564,8067,7321,421,
559,8047,7342,425,
555,8026,7364,428,
550,8006,7385,432,
546,7986,7406,436,
542,7965,7427,439,
538,7945,7448,443,
533,7925,7469,446,
529,7904,7490,450,
525,7884,7511,454,
521,7863,7532,458,
516,7843,7552,461,
512,7822,7573,465,
508,7801,7594,469,
504,7781,7615,473,
500,7760,7636,477,
496,7740,7657,480,
492,7719,7677,484,
488,7698,7698,488,
484,7677,7719,492,
480,7657,7740,496,
477,7636,7760,500,
473,7615,7781,504,
469,7594,7801,508,
465,7573,7822,512,
461,7552,7843,516,
458,7532,7863,521,
454,7511,7884,525,
450,7490,7904,529,
446,7469,7925,533,
443,7448,7945,538,
439,7427,7965,542,
436,7406,7986,546,
432,7385,8006,550,
428,7364,8026,555,
425,7342,8047,559,
421,7321,8067,564,
418,7300,8087,568,
414,7279,8107,573,
411,7258,8127,577,
408,7237,8147,582,
404,7216,8167,586,
401,7194,8187,591,
398,7173,8207,596,
394,7152,8227,600,
391,7131,8247,605,
388,7110,8267,610,
385,7088,8287,614,
381,7067,8307,619,
378,7046,8326,624,
375,7025,8346,629,
372,7003,8366,634,
369,6982,8385,639,
366,6961,8405,644,
363,6939,8424,649,
359,6918,8444,654,
356,6897,8463,659,
353,6875,8483,664,
350,6854,8502,669,
347,6833,8521,674,
345,6811,8541,679,
342,6790,8560,684,
339,6769,8579,690,
336,6747,8598,695,
333,6726,8617,700,
330,6704,8636,705,
327,6683,8655,711,
324,6662,8674,716,
322,6640,8693,722,
319,6619,8712,727,
316,6598,8730,733,
313,6576,8749,738,
311,6555,8768,744,
308,6533,8786,749,
305,6512,8805,755,
303,6491,8823,761,
300,6469,8842,766,
298,6448,8860,772,
295,6427,8879,778,
292,6405,8897,784,
290,6384,8915,790,
287,6363,8933,795,
285,6341,8951,801,
282,6320,8969,807,
280,6298,8987,813,
277,6277,9005,819,
275,6256,9023,825,
273,6234,9041,832,
270,6213,9059,838,
268,6192,9077,844,
266,6171,9094,850,
263,6149,9112,856,
261,6128,9129,863,
259,6107,9147,869,
256,6085,9164,875,
254,6064,9181,882,
252,6043,9199,888,
250,6022,9216,894,
247,6001,9233,901,
245,5979,9250,908,
243,5958,9267,914,
241,5937,9284,921,
239,5916,9301,927,
237,5895,9318,934,
234,5873,9334,941,
232,5852,9351,948,
230,5831,9368,954,
228,5810,9384,961,
226,5789,9401,968,
224,5768,9417,975,
222,5747,9433,982,
220,5726,9450,989,
218,5705,9466,996,
216,5684,9482,1003,
214,5663,9498,1010,
212,5642,9514,1017,
210,5621,9530,1025,
208,5600,9545,1032,
206,5579,9561,1039,
205,5558,9577,1046,
203,5537,9592,1054,
201,5517,9608,1061,
199,5496,9623,1069,
197,5475,9639,1076,
195,5454,9654,1084,
194,5433,9669,1091,
192,5413,9684,1099,
190,5392,9699,1107,
188,5371,9714,1114,
187,5351,9729,1122,
185,5330,9744,1130,
183,5309,9759,1138,
182,5289,9773,1145,
180,5268,9788,1153,
178,5248,9802,1161,
177,5227,9817,1169,
175,5207,9831,1177,
173,5186,9845,1185,
172,5166,9859,1193,
170,5145,9874,1202,
168,5125,9887,1210,
167,5104,9901,1218,
165,5084,9915,1226,
164,5064,9929,1235,
162,5044,9943,1243,
161,5023,9956,1251,
159,5003,9970,1260,
158,4983,9983,1268,
156,4963,9996,1277,
155,4943,10009,1286,
153,4922,10023,1294,
152,4902,10036,1303,
150,4882,10049,1312,
149,4862,10061,1320,
148,4842,10074,1329,
146,4822,10087,1338,
145,4802,10099,1347,
143,4783,10112,1356,
142,4763,10124,1365,
141,4743,10137,1374,
139,4723,10149,1383,
138,4703,10161,1392,
137,4684,10173,1401,
135,4664,10185,1411,
134,4644,10197,1420,
133,4625,10209,1429,
132,4605,10220,1439,
130,4585,10232,1448,
129,4566,10243,1457,
128,4546,10255,1467,
127,4527,10266,1476,
125,4508,10277,1486,
124,4488,10288,1496,
123,4469,10299,1505,
122,4450,10310,1515,
121,4430,10321,1525,
119,4411,10332,1535,
118,4392,10342,1545,
117,4373,10353,1554,
116,4354,10363,1564,
115,4334,10373,1574,
114,4315,10384,1585,
113,4296,10394,1595,
112,4277,10404,1605,
110,4259,10414,1615,
109,4240,10423,1625,
108,4221,10433,1636,
107,4202,10443,1646,
106,4183,10452,1656,
105,4165,10462,1667,
104,4146,10471,1677,
103,4127,10480,1688,
102,4109,10489,1698,
101,4090,10498,1709,
100,4071,10507,1720,
99,4053,10516,1730,
98,4035,10525,1741,
97,4016,10533,1752,
96,3998,10542,1763,
95,3979,10550,1774,
94,3961,10558,1785,
93,3943,10567,1796,
92,3925,10575,1807,
91,3907,10583,1818,
91,3889,10590,1829,
90,3870,10598,1840,
89,3852,10606,1852,
88,3834,10613,1863,
87,3817,10621,1874,
86,3799,10628,1886,
85,3781,10635,1897,
84,3763,10642,1909,
84,3745,10649,1920,
83,3728,10656,1932,
82,3710,10663,1944,
81,3692,10670,1955,
80,3675,10676,1967,
79,3657,10683,1979,
79,3640,10689,1991,
78,3622,10695,2003,
77,3605,10702,2015,
76,3588,10708,2027,
75,3570,10713,2039,
75,3553,10719,2051,
74,3536,10725,2063,
73,3519,10731,2075,
72,3501,10736,2088,
72,3484,10741,2100,
71,3467,10747,2112,
70,3450,10752,2125,
70,3433,10757,2137,
69,3417,10762,2150,
68,3400,10767,2162,
67,3383,10771,2175,
67,3366,10776,2188,
66,3350,10780,2200,
65,3333,10785,2213,
65,3316,10789,2226,
64,3300,10793,2239,
63,3283,10797,2252,
63,3267,10801,2265,
62,3250,10805,2278,
61,3234,10809,2291,
61,3218,10812,2304,
60,3201,10816,2317,
59,3185,10819,2331,
59,3169,10822,2344,
58,3153,10825,2357,
58,3137,10828,2371,
57,3121,10831,2384,
56,3105,10834,2398,
56,3089,10837,2411,
55,3073,10839,2425,
55,3057,10842,2438,
54,3042,10844,2452,
54,3026,10846,2466,
53,3010,10848,2480,
52,2995,10850,2493,
52,2979,10852,2507,
51,2963,10854,2521,
51,2948,10856,2535,
50,2933,10857,2549,
50,2917,10859,2563,
49,2902,10860,2578,
49,2887,10861,2592,
48,2871,10862,2606,
48,2856,10863,2620,
47,2841,10864,2635,
47,2826,10865,2649,
46,2811,10866,2664,
46,2796,10866,2678,
45,2781,10866,2693,
45,2766,10867,2707,
44,2751,10867,2722,
};


// Note LUT for His Master's Noise command 7 (Mega-Arp)
const std::array<uint8, 16> HisMastersNoiseMegaArp[16] =
{
	{0,  3,  7,  12, 15, 12, 7,  3,  0,  3,  7,  12, 15, 12, 7,  3 },
	{0,  4,  7,  12, 16, 12, 7,  4,  0,  4,  7,  12, 16, 12, 7,  4 },
	{0,  3,  8,  12, 15, 12, 8,  3,  0,  3,  8,  12, 15, 12, 8,  3 },
	{0,  4,  8,  12, 16, 12, 8,  4,  0,  4,  8,  12, 16, 12, 8,  4 },
	{0,  5,  8,  12, 17, 12, 8,  5,  0,  5,  8,  12, 17, 12, 8,  5 },
	{0,  5,  9,  12, 17, 12, 9,  5,  0,  5,  9,  12, 17, 12, 9,  5 },
	{12, 0,  7,  0,  3,  0,  7,  0,  12, 0,  7,  0,  3,  0,  7,  0 },
	{12, 0,  7,  0,  4,  0,  7,  0,  12, 0,  7,  0,  4,  0,  7,  0 },
	{0,  3,  7,  3,  7,  12, 7,  12, 15, 12, 7,  12, 7,  3,  7,  3 },
	{0,  4,  7,  4,  7,  12, 7,  12, 16, 12, 7,  12, 7,  4,  7,  4 },
	{31, 27, 24, 19, 15, 12, 7,  3,  0,  3,  7,  12, 15, 19, 24, 27},
	{31, 28, 24, 19, 16, 12, 7,  4,  0,  4,  7,  12, 16, 19, 24, 28},
	{0,  12, 0,  12, 0,  12, 0,  12, 0,  12, 0,  12, 0,  12, 0,  12},
	{0,  12, 24, 12, 0,  12, 24, 12, 0,  12, 24, 12, 0,  12, 24, 12},
	{0,  3,  0,  3,  0,  3,  0,  3,  0,  3,  0,  3,  0,  3,  0,  3 },
	{0,  4,  0,  4,  0,  4,  0,  4,  0,  4,  0,  4,  0,  4,  0,  4 }
};


/////////////////////////////////////////////////////////////////////////////////////////////


// Compute Bessel function Izero(y) using a series approximation
double Izero(double y)
{
	double s = 1, ds = 1, d = 0;
	do
	{
		d = d + 2;
		ds = ds * (y * y) / (d * d);
		s = s + ds;
	} while(ds > 1E-7 * s);
	return s;
}


static void getsinc(SINC_TYPE *psinc, double beta, double cutoff)
{
	if(cutoff >= 0.999)
	{
		// Avoid mixer overflows.
		// 1.0 itself does not make much sense.
		cutoff = 0.999;
	}
	const double izeroBeta = Izero(beta);
	const double kPi = 4.0 * std::atan(1.0) * cutoff;
	for(int isrc = 0; isrc < 8 * SINC_PHASES; isrc++)
	{
		double fsinc;
		int ix = 7 - (isrc & 7);
		ix = (ix * SINC_PHASES) + (isrc >> 3);
		if(ix == (4 * SINC_PHASES))
		{
			fsinc = 1.0;
		} else
		{
			const double x = (double)(ix - (4 * SINC_PHASES)) * (double)(1.0 / SINC_PHASES);
			const double xPi = x * kPi;
			fsinc = std::sin(xPi) * Izero(beta * std::sqrt(1 - x * x * (1.0 / 16.0))) / (izeroBeta * xPi); // Kaiser window
		}
		double coeff = fsinc * cutoff;
#ifdef MPT_INTMIXER
		*psinc++ = mpt::saturate_round<SINC_TYPE>(coeff * (1 << SINC_QUANTSHIFT));
#else
		*psinc++ = static_cast<SINC_TYPE>(coeff);
#endif
	}
}


#ifdef MODPLUG_TRACKER
bool CResampler::StaticTablesInitialized = false;
SINC_TYPE CResampler::gKaiserSinc[SINC_PHASES * 8];     // Upsampling
SINC_TYPE CResampler::gDownsample13x[SINC_PHASES * 8];  // Downsample 1.333x
SINC_TYPE CResampler::gDownsample2x[SINC_PHASES * 8];   // Downsample 2x
Paula::BlepTables CResampler::blepTables;               // Amiga BLEP resampler
#ifndef MPT_INTMIXER
mixsample_t CResampler::FastSincTablef[256 * 4];        // Cubic spline LUT
#endif // !defined(MPT_INTMIXER)
#endif // MODPLUG_TRACKER


void CResampler::InitFloatmixerTables()
{
#ifdef MPT_BUILD_FUZZER
	// Creating resampling tables can take a little while which we really should not spend
	// when fuzzing OpenMPT for crashes and hangs. This content of the tables is not really
	// relevant for any kind of possible crashes or hangs.
	return;
#endif // MPT_BUILD_FUZZER
#ifndef MPT_INTMIXER
	// Prepare fast sinc coefficients for floating point mixer
	for(std::size_t i = 0; i < std::size(FastSincTable); i++)
	{
		FastSincTablef[i] = static_cast<mixsample_t>(FastSincTable[i] * mixsample_t(1.0f / 16384.0f));
	}
#endif // !defined(MPT_INTMIXER)
}


void CResampler::InitializeTablesFromScratch(bool force)
{
	bool initParameterIndependentTables = false;
	if(force)
	{
		initParameterIndependentTables = true;
	}
#ifdef MODPLUG_TRACKER
	initParameterIndependentTables = !StaticTablesInitialized;
#endif  // MODPLUG_TRACKER

	MPT_MAYBE_CONSTANT_IF(initParameterIndependentTables)
	{
		InitFloatmixerTables();

		blepTables.InitTables();

		getsinc(gKaiserSinc, 9.6377, 0.97);
		getsinc(gDownsample13x, 8.5, 0.5);
		getsinc(gDownsample2x, 7.0, 0.425);

#ifdef MODPLUG_TRACKER
		StaticTablesInitialized = true;
#endif  // MODPLUG_TRACKER
	}

	if((m_OldSettings == m_Settings) && !force)
	{
		return;
	}

	m_WindowedFIR.InitTable(m_Settings.gdWFIRCutoff, m_Settings.gbWFIRType);

	m_OldSettings = m_Settings;
}


#ifdef MPT_RESAMPLER_TABLES_CACHED

static const CResampler & GetCachedResampler()
{
	static CResampler s_CachedResampler(true);
	return s_CachedResampler;
}


void CResampler::InitializeTablesFromCache()
{
	const CResampler & s_CachedResampler = GetCachedResampler();
	InitFloatmixerTables();
	std::copy(s_CachedResampler.gKaiserSinc, s_CachedResampler.gKaiserSinc + SINC_PHASES*8, gKaiserSinc);
	std::copy(s_CachedResampler.gDownsample13x, s_CachedResampler.gDownsample13x + SINC_PHASES*8, gDownsample13x);
	std::copy(s_CachedResampler.gDownsample2x, s_CachedResampler.gDownsample2x + SINC_PHASES*8, gDownsample2x);
	std::copy(s_CachedResampler.m_WindowedFIR.lut, s_CachedResampler.m_WindowedFIR.lut + WFIR_LUTLEN*WFIR_WIDTH, m_WindowedFIR.lut);
	blepTables = s_CachedResampler.blepTables;
}

#endif // MPT_RESAMPLER_TABLES_CACHED


#ifdef MPT_RESAMPLER_TABLES_CACHED_ONSTARTUP

struct ResampleCacheInitializer
{
	ResampleCacheInitializer()
	{
		GetCachedResampler();
	}
};
#if MPT_COMPILER_CLANG
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif // MPT_COMPILER_CLANG
static ResampleCacheInitializer g_ResamplerCachePrimer;
#if MPT_COMPILER_CLANG
#pragma clang diagnostic pop
#endif // MPT_COMPILER_CLANG

#endif // MPT_RESAMPLER_TABLES_CACHED_ONSTARTUP


OPENMPT_NAMESPACE_END
